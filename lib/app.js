// Generated by CoffeeScript 1.7.1
(function() {
  var StormFlash, agent, argv, config, error, fs, storm, util;

  argv = require('optimist').usage('Start stormflash agent with a configuration file.\nUsage: $0').demand('c')["default"]('c', '/etc/stormstack/stormflash.json').alias('c', 'config').describe('c', 'location of stormflash configuration file').argv;

  util = require('util');

  util.log("stormflash agent brewing up a new storm...");

  fs = require('fs');

  config = null;

  try {
    config = JSON.parse(fs.readFileSync(argv.config));
  } catch (_error) {
    error = _error;
    util.log(error);
    util.log("stormflash agent using default storm parameters...");
    config = {
      port: 8000,
      logfile: "/var/log/stormflash.log",
      datadir: "/var/stormflash",
      stormtracker: "auto",
      serialKey: "unknown",
      autobolt: true
    };
  } finally {
    util.log("stormflash agent infused with:\n" + util.inspect(config));
  }

  fs = require('fs');

  try {
    if (!fs.existsSync("" + config.datadir)) {
      fs.mkdirSync("" + config.datadir);
    }
    if (!fs.existsSync("" + config.datadir + "/db")) {
      fs.mkdirSync("" + config.datadir + "/db");
    }
    if (!fs.existsSync("" + config.datadir + "/certs")) {
      fs.mkdirSync("" + config.datadir + "/certs");
    }
  } catch (_error) {
    error = _error;
    util.log("Error in creating data dirs");
  }

  storm = config.storm;

  storm = {
    provider: "openstack",
    tracker: "https://allow@stormtracker.dev.intercloud.net",
    skey: "some-secure-serial-key",
    id: "testing-uuid",
    cert: "",
    key: "",
    bolt: {
      remote: "bolt://bolt.dev.intercloud.net",
      listen: 123,
      local: 8017,
      local_forwarding_ports: [8000],
      beacon: {
        interval: 10,
        retry: 3
      }
    }
  };

  StormFlash = require('./stormflash');

  agent = new StormFlash(config);

  agent.on("ready", function() {
    this.log("starting activation...");
    return this.activate(storm, (function(_this) {
      return function(err, status) {
        return _this.log("activation completed with:\n", _this.inspect(status));
      };
    })(this));
  });

  agent.on("active", function(storm) {
    this.log("firing up stormbolt...");
    return this.monitor(storm, (function(_this) {
      return function(err, status) {};
    })(this));
  });

  agent.run();

}).call(this);
