// Generated by CoffeeScript 1.7.1
(function() {
  var StormFlash, agent, argv, config, storm, _ref, _ref1, _ref2;

  argv = require('minimist')(process.argv.slice(2));

  if (argv.h != null) {
    console.log("-h view this help\n-p port number\n-l logfile\n-d datadir");
    return;
  }

  config = {};

  config.port = (_ref = argv.p) != null ? _ref : 5000;

  config.logfile = (_ref1 = argv.l) != null ? _ref1 : "/var/log/stormflash.log";

  config.datadir = (_ref2 = argv.d) != null ? _ref2 : "/var/stormstack";

  storm = config.storm;

  storm = {
    provider: "openstack",
    tracker: "https://allow@stormtracker.dev.intercloud.net",
    skey: "some-secure-serial-key",
    id: "testing-uuid",
    cert: "",
    key: "",
    ca: "",
    uplinks: ["bolt://stormtower.dev.intercloud.net"],
    uplinkStrategy: "round-robin",
    allowRelay: true,
    relayPort: 8017,
    allowedPorts: [5000],
    listenPort: 443,
    beaconInterval: 10,
    beaconRetry: 3
  };

  StormFlash = require('./stormflash');

  agent = new StormFlash(config);

  agent.on("zappa.ready", function() {
    this.log("starting activation...");
    return this.activate(storm, (function(_this) {
      return function(err, status) {
        return _this.log("activation completed with:\n", _this.inspect(status));
      };
    })(this));
  });

  agent.on("activated", function(storm) {
    var bolt, error, stormbolt;
    this.log("firing up stormbolt...");
    stormbolt = this["import"]('stormbolt');
    try {
      bolt = new stormbolt(storm.bolt);
      bolt.on("error", (function(_this) {
        return function(err) {
          _this.log("bolt error, force agent re-activation...");
          return _this.activate(config.storm, function(err, status) {
            return _this.log("re-activation completed with " + status);
          });
        };
      })(this));
      bolt.run();
    } catch (_error) {
      error = _error;
      this.log("bolt fizzled... should do something smart here");
    }
    return this.monitor(storm, (function(_this) {
      return function(err, status) {};
    })(this));
  });

  agent.run();

  if (typeof gc !== "undefined" && gc !== null) {
    setInterval((function() {
      return gc();
    }), 2000);
  }

}).call(this);
