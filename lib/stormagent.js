// Generated by CoffeeScript 1.7.1
(function() {
  var EventEmitter, StormAgent,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require('events').EventEmitter;

  StormAgent = (function(_super) {
    var async, extend, fs, path, request, util, uuid, validate;

    __extends(StormAgent, _super);

    validate = require('json-schema').validate;

    uuid = require('node-uuid');

    fs = require('fs');

    path = require('path');

    util = require('util');

    extend = require('util')._extend;

    async = require('async');

    request = require('request');

    function StormAgent(config) {
      var _base;
      this.config = config;
      if (this.config != null) {
        this.log('StormAgent constructor called with:\n' + util.inspect(this.config));
      }
      this.config = require('../package').config;
      if ((_base = this.config).repeatdelay == null) {
        _base.repeatdelay = 5000;
      }
      if (this.state == null) {
        this.state = {};
      }
      this.state = extend(this.state, {
        id: null,
        instance: uuid.v4(),
        activated: false,
        running: false
      });
      this.functions = ["agent.run", "agent.execute", "agent.activate", "agent.env.discover", "agent.env.os"];
      this.env = require('./environment');
      this.db = require('dirty')("/tmp/stormagent.db");
      this.db.on('load', (function(_this) {
        return function(err) {
          _this.log('loaded stormagent.db');
          return _this.db.forEach(function(key, val) {
            if (val) {
              return this.log('found ' + key);
            }
          });
        };
      })(this));
    }

    StormAgent.prototype.run = function(callback) {
      var _ref, _this;
      _this = this;
      return _ref = require('zappajs')(this.config.port, function() {
        this.configure((function(_this) {
          return function() {
            _this.use('bodyParser', 'methodOverride', _this.app.router, 'static');
            return _this.set({
              'basepath': '/v1.0'
            });
          };
        })(this));
        this.configure({
          development: (function(_this) {
            return function() {
              return _this.use({
                errorHandler: {
                  dumpExceptions: true,
                  showStack: true
                }
              });
            };
          })(this),
          production: (function(_this) {
            return function() {
              return _this.use('errorHandler');
            };
          })(this)
        });
        this.enable('serve jquery', 'minify');
        this.agent = _this;
        this.agent.include = this.include;
        if (callback != null) {
          callback();
        }
        this.agent.state.running = true;
        return this.agent.emit('ready');
      }), this.app = _ref.app, _ref;
    };

    StormAgent.prototype.execute = function(command, callback) {
      var exec;
      if (!command) {
        return callback(new Error("no valid command for execution!"));
      }
      console.log("executing " + command + "...");
      exec = require('child_process').exec;
      return exec(command, (function(_this) {
        return function(error, stdout, stderr) {
          if (error) {
            return callback(error);
          } else {
            return callback();
          }
        };
      })(this));
    };

    StormAgent.prototype.log = util.log;

    StormAgent.prototype.inspect = util.inspect;

    StormAgent.prototype.activate = function(storm, callback) {
      var count;
      count = 0;
      return async.until((function(_this) {
        return function() {
          return (_this.state.activated != null) && _this.state.activated;
        };
      })(this), (function(_this) {
        return function(repeat) {
          count++;
          _this.log("attempting activation (try " + count + ")...");
          return async.waterfall([
            function(next) {
              if ((storm != null) && (storm.tracker != null) && (storm.skey != null)) {
                return next(null, storm);
              }
              _this.log("discovering environment...");
              return _this.env.discover(function(storm) {
                if ((storm != null) && (storm.tracker != null) && (storm.skey != null)) {
                  return next(null, storm);
                } else {
                  return next(new Error("unable to discover environment!"));
                }
              });
            }, function(storm, next) {
              if (storm.id != null) {
                return next(null, storm);
              }
              _this.log("looking up agent ID from stormtracker... " + storm.tracker);
              return request("" + storm.tracker + "/skey/" + storm.skey, function(err, res, body) {
                var agent, error;
                try {
                  if (err) {
                    next(err);
                  }
                  switch (res.statusCode) {
                    case 200:
                      agent = JSON.parse(body);
                      storm.id = agent.id;
                      return next(null, storm);
                    default:
                      return next(err);
                  }
                } catch (_error) {
                  error = _error;
                  _this.log("unable to lookup: " + error);
                  return next(error);
                }
              });
            }, function(storm, next) {
              var error, pem;
              if ((storm.cert != null) && (storm.key != null)) {
                return next(null, storm);
              }
              _this.log("generating CSR...");
              try {
                pem = require('pem');
                return pem.createCSR({
                  country: "US",
                  state: "CA",
                  locality: "El Segundo",
                  organization: "ClearPath Networks",
                  organizationUnit: "CPN",
                  commonName: storm.id,
                  emailAddress: "" + agentId + "@intercloud.net"
                }, function(err, res) {
                  if ((res != null) && (res.csr != null)) {
                    _this.log("Activation: openssl csr generation completed , result ", res.csr);
                    storm.csr = res.csr;
                    storm.key = res.clientkey;
                    return next(null, storm);
                  } else {
                    return new Error("CSR generation failure");
                  }
                });
              } catch (_error) {
                error = _error;
                _this.log("unable to generate CSR request");
                return next(error);
              }
            }, function(storm, next) {
              var form, r;
              if ((storm.cert != null) && (storm.key != null)) {
                return next(null, storm);
              }
              _this.log("requesting CSR signing from stormtracker...");
              r = request.post("" + storm.tracker + "/" + storm.id + "/csr", function(err, res, body) {
                var error;
                try {
                  switch (res.statusCode) {
                    case 200:
                      storm.cert = body;
                      return next(null, storm);
                    default:
                      return next(err);
                  }
                } catch (_error) {
                  error = _error;
                  _this.log("unable to post CSR to get signed by stormtracker");
                  return next(error);
                }
              });
              form = r.form();
              return form.append('file', storm.csr);
            }, function(storm, next) {
              if (storm.bolt != null) {
                return next(null, storm);
              }
              _this.log("retrieving stormbolt configs from stormtracker...");
              return request("" + storm.tracker + "/" + storm.id + "/bolt", function(err, res, body) {
                var error;
                try {
                  switch (res.statusCode) {
                    case 200:
                      storm.bolt = JSON.parse(body);
                      return next(null, storm);
                    default:
                      return next(err);
                  }
                } catch (_error) {
                  error = _error;
                  _this.log("unable to retrieve stormbolt configs");
                  return next(error);
                }
              });
            }
          ], function(err, storm) {
            if (storm != null) {
              _this.log("activation completed successfully");
              _this.state.activated = true;
              _this.emit("active", storm);
              return repeat;
            } else {
              _this.log("error during activation: " + err);
              return setTimeout(repeat, _this.config.repeatdelay);
            }
          });
        };
      })(this), (function(_this) {
        return function(err) {
          _this.log("final call on until...");
          return callback(err, _this.state);
        };
      })(this));
    };

    return StormAgent;

  })(EventEmitter);

  module.exports = StormAgent;

  if (typeof gc !== "undefined" && gc !== null) {
    setInterval((function() {
      return gc();
    }), 2000);
  }

}).call(this);
