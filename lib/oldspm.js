// Generated by CoffeeScript 1.7.1
(function() {
  var StormPackageManager, getnpmname, getpkgname, isInstalled, rundpkg, runnpm, _install_npm,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  getnpmname = function(name) {
    var i, packageobj, temparr, val, _i, _len;
    packageobj = {
      'name': '',
      'version': ''
    };
    temparr = name.split(/\s+/);
    if (temparr.length === 2) {
      for (_i = 0, _len = temparr.length; _i < _len; _i++) {
        i = temparr[_i];
        if (i.indexOf('@') !== -1) {
          val = i.split('@');
          packageobj.name = val[0];
          packageobj.version = val[1];
          return packageobj;
        }
      }
    }
    return null;
  };

  getpkgname = function(name) {
    var packageobj, temparr;
    packageobj = {
      'name': '',
      'version': ''
    };
    temparr = name.split(/\s+/);
    if (temparr.length > 4) {
      if (temparr[1] != null) {
        packageobj.name = temparr[1];
        packageobj.version = temparr[2];
        return packageobj;
      }
    }
    return null;
  };

  isInstalled = function(toolname) {
    var mod, present;
    mod = require('find-in-path');
    present = false;
    mod(toolname, function(err, path) {
      if (err != null) {
        console.log("isInstalled Error " + err + " occured, when we find toolname " + toolname);
      }
      if (path != null) {
        present = true;
        return console.log("" + toolname + " present in the system");
      }
    });
    return present;
  };

  rundpkg = (function(callback) {
    var cs, myoutput, pg, resultarray;
    cs = require('child_process');
    myoutput = '';
    resultarray = [];
    pg = cs.spawn('dpkg', ['-l']);
    pg.stdout.on('data', function(data) {
      return myoutput = myoutput.concat(data);
    });
    pg.stderr.on('data', function(data) {
      return console.log('rundpkg:recvd error ' + data);
    });
    return pg.on('close', function(code) {
      var i, k, myout, op, _i, _len;
      console.log('rundpkg: exits with code ', code);
      myout = myoutput.split("\n");
      i = 0;
      for (_i = 0, _len = myout.length; _i < _len; _i++) {
        k = myout[_i];
        op = getpkgname(k);
        if (op !== null) {
          resultarray.push(op);
        }
      }
      return callback(resultarray);
    });
  });

  runnpm = (function(callback) {
    var cs, myoutput, pg, resultarray;
    cs = require('child_process');
    myoutput = '';
    resultarray = [];
    pg = cs.spawn('npm', ['ls']);
    pg.stdout.on('data', function(data) {
      return myoutput = myoutput.concat(data);
    });
    pg.stderr.on('data', function(data) {
      return console.log('runnpm : recvd error' + data);
    });
    return pg.on('close', function(code) {
      var k, myout, op, _i, _len, _results;
      console.log('runnpm: exits with code', code);
      myout = myoutput.split("\n");
      _results = [];
      for (_i = 0, _len = myout.length; _i < _len; _i++) {
        k = myout[_i];
        op = getnpmname(k);
        if (op !== null) {
          resultarray.push(op);
        }
        _results.push(callback(resultarray));
      }
      return _results;
    });
  });

  _install_npm = function(data, callback) {
    var exec;
    exec = require('child_process').exec;
    console.log("installing nodejs app " + data.name);
    return exec("npm install " + data.name + "@" + data.version + "; ls -l ./node_modules/" + data.name + " ", (function(_this) {
      return function(error, stdout, stderr) {
        console.log("success fully installed");
        return callback(true);
      };
    })(this));
  };

  StormPackageManager = (function(_super) {
    var linuxflavors, pkgmgrapp;

    __extends(StormPackageManager, _super);

    linuxflavors = ['cloudnode', 'ubuntu', 'fedora', 'centos', 'redhat'];

    pkgmgrapp = [];

    StormPackageManager.ostype = 'Unknown';

    StormPackageManager.osflavor = 'Unknown';

    StormPackageManager.packageApp = 'Unknown';

    StormPackageManager.npmpresent = false;

    function StormPackageManager() {
      var contents, fs, i, pkglist, val, _i, _j, _k, _len, _len1, _len2;
      console.log('storm package manager constructor called');
      pkgmgrapp.push({
        flavor: 'cloudnode',
        pkg: ['dpkg']
      });
      pkgmgrapp.push({
        flavor: 'ubuntu',
        pkg: ['dpkg', 'apt-get']
      });
      this.ostype = require('os').type();
      fs = require('fs');
      if (fs.existsSync('/etc/lsb-release') === true) {
        contents = fs.readFileSync('/etc/lsb-release', 'utf8');
        console.log(contents);
        for (_i = 0, _len = linuxflavors.length; _i < _len; _i++) {
          val = linuxflavors[_i];
          if (contents.toLowerCase().indexOf(val.toLowerCase()) !== -1) {
            this.osflavor = val;
          }
        }
      }
      console.log("OS: " + this.ostype + ", Flavor " + this.osflavor);
      if (!((this.ostype != null) || (this.osflavor != null))) {
        for (_j = 0, _len1 = pkgmgrapp.length; _j < _len1; _j++) {
          i = pkgmgrapp[_j];
          if (i.flavor.toLowerCase() === this.osflavor.toLowerCase()) {
            pkglist = i.pkg;
          }
        }
        for (_k = 0, _len2 = pkglist.length; _k < _len2; _k++) {
          i = pkglist[_k];
          if (isInstalled(i) === true) {
            this.packageApp = i;
            break;
          }
        }
      }
      console.log('packageapp ', this.packageApp);
      this.npmpresent = isInstalled('npm');
      console.log('npm present', this.npmpresent);
    }

    StormPackageManager.prototype.install = function(pkg, callback) {
      var exec, parsedurl, url;
      console.log(pkg);
      exec = require('child_process').exec;
      url = require('url');
      parsedurl = url.parse(pkg.source, true);
      console.log(parsedurl);
      console.log('the protocol for the package download is ' + parsedurl.protocol);
      switch (parsedurl.protocol) {
        case 'npm:':
          console.log("npm protocol.. we should do nodejs installation");
          if (parsedurl.host == null) {
            console.log("we dont update repo currently.. installating with default");
          }
          _install_npm(pkg, (function(_this) {
            return function(result) {
              console.log(result);
              return callback("{installed}");
            };
          })(this));
          break;
        case 'deb:':
          console.log("deb protocol.. we should do debian package installation");
          break;
        default:
          console.log("unknown protocol.. dont know what to do..ignoring");
      }
      return callback("{install:true}");
    };

    StormPackageManager.prototype.list = function(callback) {
      var err, res;
      res = {
        'os': '',
        'osflavor': '',
        'dpkg': {
          'enabled': '',
          'installed': []
        },
        'npm': {
          'enabled': '',
          'installed': []
        }
      };
      res.os = this.ostype;
      res.osflavor = this.osflavor;
      res.npm.enabled = this.npmpresent;
      try {
        if (this.packageApp === 'dpkg') {
          res.dpkg.enabled = true;
          return rundpkg((function(_this) {
            return function(resultarray) {
              res.dpkg.installed = resultarray;
              return callback(res);
            };
          })(this));
        } else {
          return callback(res);
        }
      } catch (_error) {
        err = _error;
        console.log('Error catched: ', err);
        return callback(res);
      }
    };

    return StormPackageManager;

  })(EventEmitter);

  module.exports = StormPackage;

}).call(this);
