// Generated by CoffeeScript 1.7.1
(function() {
  this.include = function() {
    var exec, fs, loadModule, schema, validate, validateModuleDesc;
    validate = require('json-schema').validate;
    schema = {};
    this.get({
      '/': function() {
        var res, util;
        util = require('util');
        util.log("get / with agent: " + util.inspect(this.agent));
        res = this.agent.env.os();
        console.log(res);
        return this.send(res);
      }
    });
    this.get({
      '/environment': function() {
        var res;
        res = this.agent.env.os();
        console.log(res);
        return this.send(res);
      }
    });
    this.get({
      '/bolt': function() {
        var x;
        x = require('./activation').getBoltData();
        console.log(x);
        return this.send(x);
      }
    });
    schema.packages = {
      name: "packages",
      type: "object",
      required: true,
      properties: {
        name: {
          type: "string",
          "required": true
        },
        version: {
          type: "string",
          "required": true
        },
        source: {
          type: "string",
          "required": true
        }
      }
    };
    this.post({
      '/packages': function() {
        var pkg, result;
        console.log(JSON.stringify(this.body));
        result = validate(this.body, schema.packages);
        this.agent.log(result);
        pkg = new StormPackage(this.body);
        return this.agent.install(pkg, (function(_this) {
          return function(res) {
            _this.agent.log(res);
            return _this.send(res);
          };
        })(this));
      }
    });
    this.get({
      '/packages': function() {
        return this.agent.list((function(_this) {
          return function(res) {
            console.log(res);
            return _this.send(res);
          };
        })(this));
      }
    });
    schema.personality = {
      name: "personality",
      type: "object",
      items: {
        type: "object",
        additionalProperties: false,
        properties: {
          path: {
            type: "string",
            required: true
          },
          contents: {
            type: "string",
            required: true
          },
          postxfer: {
            type: "string"
          }
        }
      }
    };
    this.post({
      '/personality': function() {
        var exec, fs, p, path, result, _fn, _i, _len, _ref;
        console.log('performing schema validation on incoming service JSON');
        result = validate(this.body, schema.personality);
        console.log(result);
        if (!result.valid) {
          return this.next(new Error("Invalid personality posting!: " + result.errors));
        }
        fs = require('fs');
        exec = require('child_process').exec;
        path = require('path');
        _ref = this.body.personality;
        _fn = function(p) {
          var dir;
          console.log("writing personality to " + p.path + "...");
          dir = path.dirname(p.path);
          if (!path.existsSync(dir)) {
            return exec("mkdir -p " + dir, (function(_this) {
              return function(error, stdout, stderr) {
                if (!error) {
                  return fs.writeFile(p.path, new Buffer(p.contents || '', "base64"), function() {
                    if (p.postxfer != null) {
                      return exec("" + p.postxfer, function(error, stdout, stderr) {
                        if (error) {
                          console.log("issuing '" + p.postxfer + "'... stderr: " + stderr);
                        }
                        if (!error) {
                          return console.log("issuing '" + p.postxfer + "'... stdout: " + stdout);
                        }
                      });
                    }
                  });
                }
              };
            })(this));
          } else {
            return fs.writeFile(p.path, new Buffer(p.contents || '', "base64"), function() {
              if (p.postxfer != null) {
                return exec("" + p.postxfer, function(error, stdout, stderr) {
                  if (error) {
                    console.log("issuing '" + p.postxfer + "'... stderr: " + stderr);
                  }
                  if (!error) {
                    return console.log("issuing '" + p.postxfer + "'... stdout: " + stdout);
                  }
                });
              }
            });
          }
        };
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          p = _ref[_i];
          _fn(p);
        }
        return this.send({
          result: 'success'
        });
      }
    });
    fs = require('fs');
    exec = require('child_process').exec;
    this.get({
      '/plugins': function() {
        var res;
        res = this.agent.list();
        console.log(res);
        return this.send(res);
      }
    });
    validateModuleDesc = function() {
      var result;
      console.log(this.body);
      result = this.agent.validate(this.body);
      console.log(result);
      if (!result.valid) {
        return this.next(new Error("Invalid module posting!: " + result.errors));
      }
      return this.next();
    };
    loadModule = function() {
      var result;
      result = this.agent.lookup(this.params.id);
      if (!(result instanceof Error)) {
        this.request.module = result;
        return this.next();
      } else {
        return this.next(result);
      }
    };
    this.post('/plugins', validateModuleDesc, function() {
      var module;
      module = this.agent["new"](this.body);
      return this.agent.add(module, '', true, (function(_this) {
        return function(res) {
          if (!(res instanceof Error)) {
            if (res.status === 304) {
              return _this.send(304);
            } else {
              return _this.send(res);
            }
          } else {
            return _this.next(new Error("Invalid module posting! " + res));
          }
        };
      })(this));
    });
    this.get('/plugins/:id', loadModule, function() {
      var installed, module, status;
      module = this.request.module;
      installed = null;
      if (module.status) {
        installed = true;
      }
      status = {
        installed: installed != null ? installed : false,
        initialized: false,
        running: false,
        result: 'unknown'
      };
      return exec("monit summary | grep " + module.description.name, (function(_this) {
        return function(error, stdout, stderr) {
          console.log('stdout : ' + stdout);
          if (error || stderr) {
            status.result = '' + error;
          } else {
            if (stdout.match(/start pending/)) {
              status.initialized = true;
            } else if (stdout.match(/Running/)) {
              if (!stdout.match(/stop pending/)) {
                status.initialized = true;
                status.running = true;
              }
            }
            status.result = stdout;
          }
          module.status = status;
          console.log(module);
          return _this.send(module);
        };
      })(this));
    });
    this.put('/plugins/:id', validateModuleDesc, loadModule, function() {
      var module;
      module = this.agent["new"](this.body, this.params.id);
      return this.agent.update(module, this.request.module, (function(_this) {
        return function(res) {
          if (!(res instanceof Error)) {
            if (res.status === 304) {
              return _this.send(304);
            } else {
              return _this.send(res);
            }
          } else {
            return _this.next(new Error("Invalid module posting! " + res));
          }
        };
      })(this));
    });
    this.del('/plugins/:id', loadModule, function() {
      return this.agent.remove(this.request.module, (function(_this) {
        return function(res) {
          if (!(res instanceof Error)) {
            if (res.result === 304) {
              return _this.send(304);
            } else {
              return _this.send({
                deleted: true
              });
            }
          } else {
            return _this.next(res);
          }
        };
      })(this));
    });
    this.post('/plugins/:id/action', loadModule, function() {
      var desc, module;
      if (!this.body.command) {
        return this.next(new Error("Invalid module posting!"));
      }
      module = this.request.module;
      desc = module.description;
      console.log("looking to issue 'monit " + this.body.command + " " + desc.name + "'");
      switch (this.body.command) {
        case "start":
        case "stop":
        case "restart":
          return exec("monit " + this.body.command + " " + desc.name, (function(_this) {
            return function(error, stdout, stderr) {
              if (error) {
                return _this.next(new Error("Unable to perform requested action!"));
              }
              return _this.send({
                result: true
              });
            };
          })(this));
        default:
          return this.next(new Error("Invalid action, must specify 'command' (start|stop,restart)!"));
      }
    });
    return this.get('/getmodules', function() {
      var module, nodeModules, pattern, regex, res, _i, _len;
      res = [];
      nodeModules = fs.readdirSync("/lib/node_modules");
      pattern = "^stormflash";
      regex = new RegExp(pattern);
      for (_i = 0, _len = nodeModules.length; _i < _len; _i++) {
        module = nodeModules[_i];
        if (regex.test(module)) {
          console.log('module: ' + module);
          res.push(module);
        }
      }
      return this.send(res);
    });
  };

}).call(this);
