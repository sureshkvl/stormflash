// Generated by CoffeeScript 1.7.1
(function() {
  var StormBolt, StormData, StormFlash, StormInstance, StormInstances, StormRegistry,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Array.prototype.unique = function() {
    var key, output, value, _i, _ref, _results;
    output = {};
    for (key = _i = 0, _ref = this.length; 0 <= _ref ? _i < _ref : _i > _ref; key = 0 <= _ref ? ++_i : --_i) {
      output[this[key]] = this[key];
    }
    _results = [];
    for (key in output) {
      value = output[key];
      _results.push(value);
    }
    return _results;
  };

  StormData = require('stormagent').StormData;

  StormInstance = (function(_super) {
    var schema;

    __extends(StormInstance, _super);

    schema = {
      name: "instance",
      type: "object",
      required: true,
      properties: {
        name: {
          type: "string",
          "required": true
        },
        version: {
          type: "string",
          "required": true
        },
        source: {
          type: "string",
          "required": true
        }
      }
    };

    function StormInstance(id, data) {
      StormInstance.__super__.constructor.call(this, id, data, schema);
    }

    return StormInstance;

  })(StormData);

  StormRegistry = require('stormagent').StormRegistry;

  StormInstances = (function(_super) {
    __extends(StormInstances, _super);

    function StormInstances(filename) {
      var processlib;
      this.on('load', function(key, val) {
        var entry;
        entry = new StormInstance(key, val);
        if (entry != null) {
          entry.saved = true;
          return this.add(key, entry);
        }
      });
      this.on('removed', function(token) {
        if (token.destroy != null) {
          return token.destroy();
        }
      });
      processlib = require('./processlib');
      this.processmgr = new processlib();
      StormInstances.__super__.constructor.call(this, filename);
    }

    StormInstances.prototype.get = function(key) {
      var entry;
      return entry = StormInstances.__super__.get.call(this, key);
    };

    return StormInstances;

  })(StormRegistry);

  StormBolt = require('stormbolt');

  StormFlash = (function(_super) {
    var exec, fs, path, validate;

    __extends(StormFlash, _super);

    validate = require('json-schema').validate;

    exec = require('child_process').exec;

    fs = require('fs');

    path = require('path');

    function StormFlash(config) {
      StormFlash.__super__.constructor.call(this, config);
      this["import"](module);
      this.packages = new StormPackages("" + this.config.datadir + "/packages.db");
      this.instances = new StormInstances("" + this.config.datadir + "/instances.db");
    }

    StormFlash.prototype.status = function() {
      var state;
      state = StormFlash.__super__.status.apply(this, arguments);
      state.packages = this.packages.list();
      state.instances = this.instances.list();
      return state;
    };

    StormFlash.prototype.run = function(config) {

      /*
      if config?
          @log 'run called with:', config
          res = validate config, schema
          @log 'run - validation of runtime config:', res
          @config = extend(@config, config) if res.valid
       */
      StormFlash.__super__.run.call(this, config);
      this.packages.monitor(this.config.repeatdelay);
      return this.instances.monitor(this.config.repeatdelay);
    };

    StormFlash.prototype.install = function(pinfo, callback) {
      var pkg;
      pkg = this.packages.match(pinfo);
      if (pkg != null) {
        return callback(pkg);
      }
      return this.spm.install(pinfo, (function(_this) {
        return function(pkg) {
          if (pkg instanceof Error) {
            return callback(500);
          }
          if (pkg.npm) {
            _this["import"](pkg.name);
          }
          _this.emit('installed', pkg);
          return callback(pkg);
        };
      })(this));
    };

    StormFlash.prototype.uninstall = function(pinfo, callback) {
      var exists, stormflashModule;
      stormflashModule = [];
      exists = 0;
      return fs.existsSync("/lib/node_modules/" + module.description.name, function(exists) {
        if (exists) {
          return callback({
            result: 304
          });
        } else {
          this.db.forEach(function(key, val) {
            if (val && key !== module.id) {
              return stormflashModule.push(val.description.name);
            }
          });
          console.log('stormflashModule in DEL: ' + stormflashModule);
          return this.db.rm(module.id, (function(_this) {
            return function() {
              _this.includeModules(stormflashModule);
              console.log("removed module ID: " + module.id);
              return callback({
                result: 200
              });
            };
          })(this));
        }
      });
    };

    StormFlash.prototype.getCommand = function(installer, command, target, version) {
      var append;
      append = '';
      switch ("" + installer + "." + command) {
        case "npm.check":
          if (version != null) {
            append = "@" + version;
          }
          return "cd /lib; npm ls 2>/dev/null | grep " + target + append;
        default:
          console.log(new Error("invalid command " + installer + "." + command + " for " + target + "!"));
          return null;
      }
    };

    StormFlash.prototype.check = function(component, callback) {
      var command;
      console.log("checking if the component '" + component.name + "' has already been installed using npm...");
      command = this.getCommand('npm', "check", component.name, component.version);
      return this.execute(command, (function(_this) {
        return function(error) {
          if (!error) {
            console.log("" + component.name + " is already installed");
            return callback(true);
          } else {
            return callback(error);
          }
        };
      })(this));
    };

    StormFlash.prototype.update = function(module, entry, callback) {
      if (module.id) {
        return this.add(module, entry, false, (function(_this) {
          return function(res) {
            if (!(res instanceof Error)) {
              return callback(res);
            } else {
              return callback(res);
            }
          };
        })(this));
      } else {
        return callback(new Error("Could not find ID! " + id));
      }
    };

    return StormFlash;

  })(StormBolt);

  module.exports = StormFlash;

}).call(this);
