// Generated by CoffeeScript 1.8.0
(function() {
  var StormBolt, StormData, StormFlash, StormInstance, StormInstances, StormPackage, StormPackages, StormRegistry, agent, async, config, query, storm,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Array.prototype.unique = function() {
    var key, output, value, _i, _ref, _results;
    output = {};
    for (key = _i = 0, _ref = this.length; 0 <= _ref ? _i < _ref : _i > _ref; key = 0 <= _ref ? ++_i : --_i) {
      output[this[key]] = this[key];
    }
    _results = [];
    for (key in output) {
      value = output[key];
      _results.push(value);
    }
    return _results;
  };

  StormData = require('stormagent').StormData;

  StormRegistry = require('stormagent').StormRegistry;

  query = require('dirty-query').query;

  async = require('async');

  StormInstance = (function(_super) {
    var schema;

    __extends(StormInstance, _super);

    schema = {
      name: "instance",
      type: "object",
      required: true,
      additionalProperties: true,
      properties: {
        name: {
          type: "string",
          "required": true
        },
        id: {
          type: "string",
          "required": false
        },
        path: {
          type: "string",
          "required": true
        },
        pid: {
          type: "integer",
          "required": false
        },
        monitor: {
          type: "boolean",
          "required": false
        },
        status: {
          type: "string",
          "required": false
        },
        options: {
          type: "object",
          required: false
        },
        args: {
          type: "array",
          required: false,
          items: {
            type: "string",
            required: false
          }
        }
      }
    };

    function StormInstance(data) {
      StormInstance.__super__.constructor.call(this, null, data, schema);
    }

    return StormInstance;

  })(StormData);

  StormInstances = (function(_super) {
    __extends(StormInstances, _super);

    function StormInstances(filename) {
      this.on('load', function(key, val) {
        var entry;
        entry = new StormInstance(val);
        if (entry != null) {
          entry.saved = true;
          entry.id = key;
          return this.add(key, entry);
        }
      });
      this.on('updated', function(entry) {
        return this.log("Updated entry with key " + entry.id + " with pid " + entry.data.pid);
      });
      StormInstances.__super__.constructor.call(this, filename);
    }

    StormInstances.prototype.get = function(key) {
      var entry;
      entry = StormInstances.__super__.get.call(this, key);
      if (entry == null) {
        return;
      }
      if (entry.data != null) {
        entry.data.id = entry.id;
        return entry.data;
      } else {
        return entry;
      }
    };

    StormInstances.prototype.discover = function() {
      var entry, key, _results;
      _results = [];
      for (key in this.entries) {
        entry = this.entries[key];
        if ((entry != null) && (entry.data != null) && (entry.data.pid != null)) {
          if (entry.data.monitor === true) {
            this.log("Emitting monitor for discovered pid " + entry.data.pid);
            entry.monitorOn = true;
            _results.push(this.emit("attachnMonitor", entry.data.pid, key));
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    StormInstances.prototype.match = function(name) {
      var entry, instance, key;
      for (key in this.entries) {
        entry = this.entries[key];
        if (!((entry != null) && (entry.data != null))) {
          return;
        }
        instance = entry.data;
        if (instance.name === name) {
          instance.id = entry.id;
          return instance;
        }
      }
    };

    return StormInstances;

  })(StormRegistry);

  StormPackage = (function(_super) {
    var schema;

    __extends(StormPackage, _super);

    schema = {
      name: "package",
      type: "object",
      required: true,
      properties: {
        name: {
          type: "string",
          "required": true
        },
        id: {
          type: "string",
          "required": false
        },
        version: {
          type: "string",
          "required": true
        },
        source: {
          type: "string",
          "required": true
        },
        status: {
          type: "object",
          required: false,
          properties: {
            installed: {
              type: "boolean",
              "required": false
            },
            imported: {
              type: "boolean",
              "required": false
            }
          }
        },
        type: {
          type: "string",
          "required": false
        }
      }
    };

    function StormPackage(id, data) {
      StormPackage.__super__.constructor.call(this, id, data, schema);
    }

    return StormPackage;

  })(StormData);

  StormPackages = (function(_super) {
    __extends(StormPackages, _super);

    function StormPackages(filename) {
      this.on('load', function(key, val) {
        var entry;
        entry = new StormPackage(key, val);
        if (entry != null) {
          entry.saved = true;
          return this.add(key, entry);
        }
      });
      this.on('removed', function(key) {});
      StormPackages.__super__.constructor.call(this, filename);
    }

    StormPackages.prototype.get = function(key) {
      var entry;
      entry = StormPackages.__super__.get.call(this, key);
      if (entry == null) {
        return;
      }
      if (entry.data != null) {
        entry.data.id = entry.id;
        return entry.data;
      } else {
        return entry;
      }
    };

    StormPackages.prototype.match = function(pinfo) {
      var packages;
      this.log("Matching the package " + pinfo.name + " with db");
      packages = query(this.db, {
        name: pinfo.name,
        version: pinfo.version
      });
      if (!packages) {
        packages = query(this.db, {
          name: pinfo.name,
          version: "*"
        });
      }
      if (packages[0] != null) {
        this.log("Matched Package " + pinfo.name);
      }
      return packages[0];
    };

    StormPackages.prototype.find = function(name, version) {
      var packages;
      packages = query(this.db, {
        name: name,
        version: version
      });
      if (packages == null) {
        packages = query(this.db, {
          name: name,
          version: "*"
        });
      }
      if (packages[0] != null) {
        this.log("Found Package " + name + " ");
      }
      return packages[0];
    };

    return StormPackages;

  })(StormRegistry);

  StormBolt = require('stormbolt');

  StormFlash = (function(_super) {
    var exec, fs, path, processmgr, spm, uuid, validate;

    __extends(StormFlash, _super);

    validate = require('json-schema').validate;

    exec = require('child_process').exec;

    fs = require('fs');

    path = require('path');

    uuid = require('node-uuid');

    spm = require('./spm');

    processmgr = require('./processmgr');

    function StormFlash(config) {
      StormFlash.__super__.constructor.call(this, config);
      this["import"](module);
      fs.mkdir("" + this.config.datadir, function() {});
      fs.mkdir("" + this.config.datadir + "/plugins", function() {});
      this.services = new StormRegistry;
      this.packages = new StormPackages("" + this.config.datadir + "/packages.db");
      this.instances = new StormInstances("" + this.config.datadir + "/instances.db");
      this.instances.on('ready', (function(_this) {
        return function() {
          return _this.instances.discover();
        };
      })(this));
    }

    StormFlash.prototype.status = function() {
      var state;
      state = StormFlash.__super__.status.apply(this, arguments);
      state.packages = this.packages.list();
      state.services = this.services.list();
      state.instances = this.instances.list();
      return state;
    };

    StormFlash.prototype.run = function(config) {
      StormFlash.__super__.run.call(this, config);
      this.log('loading Storm Package Manager...');
      this.spm = new spm({
        log: this.log,
        repeatInterval: this.config.repeatInterval
      });
      this.spm.on('discovered', (function(_this) {
        return function(pkgType, pinfo) {
          var pkg, spkg;
          pkg = _this.packages.find(pinfo.name, pinfo.version);
          if (pkg == null) {
            _this.log("SPM Discovered a new package " + pinfo.name);
            spkg = new StormPackage(null, pinfo);
            spkg.data.status = {};
            return _this.packages.update(spkg.id, spkg);
          }
        };
      })(this));
      this.packages.on('updated', (function(_this) {
        return function(pkginfo) {
          var err, pkg;
          if (!((pkginfo != null) || (pkginfo.data != null))) {
            return;
          }
          pkg = pkginfo.data;
          if (pkg.type === "npm" && /npm:/.test(pkg.source)) {
            try {
              _this["import"](pkg.name);
              pkginfo.data.status.imported = true;
              return pkginfo.data.status.installed = true;
            } catch (_error) {
              err = _error;
              return _this.log("Not able to import the module " + pkg.name);
            }
          } else {
            return pkginfo.data.status.installed = true;
          }
        };
      })(this));
      this.packages.on('ready', (function(_this) {
        return function() {
          _this.log("SPM started Monitoring the system for packages...");
          return _this.spm.monitor(_this.config.repeatInterval);
        };
      })(this));
      this.log('loading Storm Instance/Process Manager...');
      this.processmgr = new processmgr();
      this.processmgr.on("error", (function(_this) {
        return function(error, key, pid) {
          var entry;
          _this.log("Error while starting the process for key " + key + " ", error);
          entry = _this.instances.entries[key];
          if (entry != null) {
            entry.data.status = "error";
            entry.saved = true;
            entry.monitorOn = false;
            entry.data.pid = void 0;
            return _this.instances.update(key, entry);
          }
        };
      })(this));
      this.processmgr.on("signal", (function(_this) {
        return function(signal, pid, key) {
          var entry;
          _this.log("recieved signal " + signal + " from pid " + pid + " with key " + key);
          switch (signal) {
            case "stopped":
            case "killed":
            case "exited":
              entry = _this.instances.entries[key];
              if ((entry != null) && entry.monitorOn === true) {
                _this.log("Starting the process with " + entry.name);
                _this.log("Sending stop signal to pid " + pid);
                _this.processmgr.stop(pid, key);
                return _this.start(key, function(key, pid) {
                  if (key instanceof Error) {
                    _this.log(key);
                  }
                });
              }
              break;
            case "error":
              return _this.log("Error in getting signals from process");
          }
        };
      })(this));
      this.processmgr.on("attachError", (function(_this) {
        return function(err, pid, key) {
          var entry;
          _this.log('attach error ', err, pid, key);
          entry = _this.instances.entries[key];
          if (entry !== void 0 && (entry != null)) {
            entry.data.status = "error";
            return _this.log("Failed to attach for pid ", pid, "Reason is ", err);
          }
        };
      })(this));
      this.processmgr.on("detachError", (function(_this) {
        return function(err, pid, key) {
          var entry;
          entry = _this.instances.entries[key];
          if (entry !== void 0 && (entry != null)) {
            entry.data.status = "error";
            return _this.log("Failed to detach for pid ", pid, "Reason is ", err);
          }
        };
      })(this));
      this.processmgr.on("stopped", (function(_this) {
        return function(signal, pid, key) {
          var entry;
          if (signal != null) {
            _this.log("process stopped due to signal ", signal);
          }
          if (key != null) {
            entry = _this.instances.entries[key];
          }
          if (entry != null) {
            if (entry != null) {
              _this.log("process was not running. pid expected is  ", pid, "binary name is ", entry.name);
            }
            return _this.start(key, function(key, pid) {
              if (key instanceof Error) {
                _this.log(key);
              }
            });
          }
        };
      })(this));
      this.processmgr.on("attached", (function(_this) {
        return function(result, pid, key) {
          var entry;
          entry = _this.instances.entries[key];
          if (entry != null) {
            entry.data.status = "running|monitored";
            return _this.log("process " + pid + " with key " + key + "  is attached");
          }
        };
      })(this));
      this.instances.on("attachnMonitor", (function(_this) {
        return function(pid, key) {
          _this.log("Starting monitor on discovered pid " + pid + " with key " + key);
          _this.processmgr.attach(pid, key);
          return _this.processmgr.monitor(pid, key);
        };
      })(this));
      return this.processmgr.on("monitor", (function(_this) {
        return function(pid, key) {
          _this.log("Starting monitor on pid " + pid + " with key " + key);
          return _this.processmgr.monitor(pid, key);
        };
      })(this));
    };

    StormFlash.prototype.install = function(pinfo, callback) {
      var err, pkg, result, spkg;
      try {
        spkg = new StormPackage(null, pinfo);
      } catch (_error) {
        err = _error;
        return callback(new Error(err));
      }
      pkg = this.packages.match(spkg.data);
      if (pkg != null) {
        this.log("Found matching package name " + pkg.name);
        return callback(pkg);
      }
      spkg.data.status = {};
      spkg.data.status.installed = false;
      spkg.data.status.imported = false;
      result = this.packages.add(spkg.id, spkg);
      result.data.id = result.id;
      return this.spm.install(pinfo, (function(_this) {
        return function(pkg) {
          if (pkg instanceof Error) {
            return callback(new Error(pkg));
          }
          spkg.data = pkg;
          spkg.data.status = {};
          spkg.data.status.installed = true;
          spkg.data.status.imported = false;
          result = _this.packages.update(spkg.id, spkg);
          result.data.id = result.id;
          _this.log('installed the package ', result);
          return callback(result);
        };
      })(this));
    };

    StormFlash.prototype.uninstall = function(pinfo, callback) {
      var instance, pkg;
      pkg = this.packages.match(pinfo);
      if (pkg == null) {
        return void 0;
      }
      instance = this.instances.match(pkg.name);
      if (instance != null) {
        this.processmgr.once('stop', function(key, pid) {
          this.processmgr.stop(pid, key);
          return this.instances.remove(key);
        });
        this.processmgr.emit('stop', instance.key, instance.pid);
      }
      return this.spm.uninstall(pinfo, (function(_this) {
        return function(result) {
          if (result instanceof Error) {
            return callback(new Error(result));
          }
          _this.emit('uinstalled', pkg.name, pkg.id);
          _this.packages.remove(pkg.id);
          return callback(result);
        };
      })(this));
    };

    StormFlash.prototype.update = function(module, entry, callback) {
      if (module.id) {
        return this.add(module, entry, false, (function(_this) {
          return function(res) {
            if (!(res instanceof Error)) {
              return callback(res);
            } else {
              return callback(res);
            }
          };
        })(this));
      } else {
        return callback(new Error("Could not find ID! " + id));
      }
    };

    StormFlash.prototype.invoke = function(service, callback) {
      var match, notRunning, opts, pid;
      opts = service.invocation;
      if (opts == null) {
        return callback(new Error("cannot invoke a service without valid service options"));
      }
      match = this.services.get(service.id);
      if (match != null) {
        return callback("DUPLICATE agent.invoke called for " + service.id + " from plugin!");
      }
      try {
        if (service.instance == null) {
          throw new Error("no previous server.instance provided for check");
        }
        process.kill(service.instance, 0);
      } catch (_error) {
        notRunning = _error;
        pid = this.processmgr.start(opts.name, opts.path, opts.args, opts.options, service.id);
        if (pid == null) {
          return callback(new Error("unable to invoke a new service via processmgr"));
        }
      }
      return this.processmgr.waitpid(pid, {
        test: false,
        timeout: 500
      }, (function(_this) {
        return function(err, duration) {
          if (err == null) {
            return callback(new Error("" + service.id + " stopped running after " + (duration / 1000) + " seconds!"));
          }
          _this.log("" + service.id + " has successfully started (or was previously running), verified running for at least " + (duration / 1000) + " seconds");
          service.isRunning = true;
          _this.services.add(service.id, {
            invocation: service.invocation,
            instance: service.instance,
            running: service.isRunning
          });
          service.once('destroy', function() {
            _this.log("service.destroy called for " + service.id + " invoked with:", service.invocation);
            _this.processmgr.stop(service.instance, service.id);
            return _this.services.remove(service.id);
          });
          service.on('changed', function() {
            _this.log("service.changed called for " + service.id + " invoked with:", service.invocation);
            if (!service.isRunning) {
              return;
            }
            service.isRunning = false;
            service.isRestarting = true;
            _this.processmgr.stop(service.instance, service.id);
            return _this.processmgr.waitpid(service.instance, {
              test: false,
              timeout: 5000
            }, function(err, duration) {
              if (err != null) {
                return _this.log("" + service.id + " failed to stop in " + (duration / 1000) + " seconds... keeping things as-is");
              }
              _this.log("" + service.id + " has successfully stopped, took " + (duration / 1000) + " seconds");
              service.emit('stopped');
              opts = service.invocation;
              pid = _this.processmgr.start(opts.name, opts.path, opts.args, opts.options, service.id);
              if (pid == null) {
                service.isRestarting = false;
                return _this.log("failed to handle service.change, unable to start!");
              }
              return _this.processmgr.waitpid(pid, {
                test: false,
                timeout: 500
              }, function(err, duration) {
                if (err == null) {
                  service.isRestarting = false;
                  return _this.log("service did not start successfully after service.change!");
                }
                service.emit('running', pid);
                service.isRunning = true;
                _this.log("" + service.id + " has successfully restarted following service.change with PID " + pid + "!");
                return process.nextTick(function() {
                  return service.isRestarting = false;
                });
              });
            });
          });
          service.emit('running', pid);
          callback(null, pid);
          if (opts.monitor) {
            return async.whilst(function() {
              return service.isReady;
            }, function(monitor) {
              var waitPid;
              waitPid = service.instance;
              return (function(waitPid) {
                _this.log("monitor: starting to watch for " + service.id + " running on PID " + service.instance + "...");
                return _this.processmgr.waitpid(waitPid, {
                  test: false,
                  timeout: -1,
                  interval: 1000
                }, function(err, duration) {
                  _this.log("monitor: " + service.id + " running on PID " + waitPid + " stopped running after " + (duration / 1000) + " seconds!");
                  if (service.isRestarting || (waitPid !== service.instance)) {
                    _this.log("monitor: ignoring since the process is in the process of re-starting, going back to monitoring...");
                    setTimeout(monitor, 1000);
                    return;
                  }
                  service.emit('stopped');
                  opts = service.invocation;
                  _this.log("monitor: " + service.id + " attempting to restart!");
                  pid = _this.processmgr.start(opts.name, opts.path, opts.args, opts.options, service.id);
                  return _this.processmgr.waitpid(pid, {
                    test: false,
                    timeout: 500
                  }, function(err, duration) {
                    if (err == null) {
                      throw new Error("service did not start successfully after monitor's attempt at a restart!");
                    }
                    service.emit('running', pid);
                    _this.log("monitor: " + service.id + " has successfully restarted with PID " + pid + "!");
                    return setTimeout(monitor, 1000);
                  });
                });
              })(waitPid);
            }, function(err) {
              return _this.log("monitor: " + service.id + " service is no longer being monitored!");
            });
          }
        };
      })(this));
    };

    StormFlash.prototype.start = function(key, callback) {
      var entry, pid;
      entry = this.instances.entries[key];
      if (!((entry != null) && (entry.data != null))) {
        return callback(new Error("Key " + key + " does not exist in DB"));
      }
      pid = this.processmgr.start(entry.data.name, entry.data.path, entry.data.args, entry.data.options, key);
      if (pid == null) {
        return callback(new Error("Not able to start the binary"));
      }
      entry.data.pid = pid;
      if (entry.data.monitor === true) {
        entry.monitorOn = true;
      }
      entry.saved = true;
      this.instances.update(key, entry);
      if (entry.data.monitor === true) {
        this.processmgr.attach(pid, key);
      }
      if (callback != null) {
        callback(key, pid);
      }
      if (entry.monitorOn === true) {
        return this.processmgr.emit("monitor", pid, key);
      }
    };

    StormFlash.prototype.stop = function(key, callback) {
      var entry;
      entry = this.instances.entries[key];
      if (!((entry != null) && (entry.data != null) && (entry.data.pid != null))) {
        return callback(new Error("No running process"));
      }
      this.log("Stopping the process with pid " + entry.data.pid);
      entry.monitorOn = false;
      entry.saved = true;
      this.instances.update(key, entry);
      return this.processmgr.stop(entry.data.pid, key);
    };

    StormFlash.prototype.restart = function(key, callback) {
      var entry, status;
      entry = this.instances.entries[key];
      entry.monitorOn = false;
      status = this.processmgr.stop(entry.data.pid, key);
      if (!(status instanceof Error)) {
        return async.series([
          (function(_this) {
            return function(next) {
              return setTimeout(next, 1000);
            };
          })(this)
        ], (function(_this) {
          return function() {
            var pid;
            entry.data.options.env.LD_LIBRARY_PATH = '/lib:/usr/lib';
            pid = _this.processmgr.start(entry.data.name, entry.data.path, entry.data.args, entry.data.options, key);
            entry.data.pid = pid;
            if (entry.data.monitor === true) {
              entry.monitorOn = true;
            }
            entry.saved = true;
            _this.instances.update(key, entry);
            if (entry.data.monitor === true) {
              _this.processmgr.attach(pid, key);
            }
            if (callback != null) {
              callback(key, pid);
            }
            if (entry.monitorOn === true) {
              return _this.processmgr.emit("monitor", pid, key);
            }
          };
        })(this));
      }
    };

    StormFlash.prototype.newInstance = function(body) {
      var err;
      try {
        return new StormInstance(body);
      } catch (_error) {
        err = _error;
        return new Error(err);
      }
    };

    return StormFlash;

  })(StormBolt);


  /*
   * SINGLETON CLASS OBJECT
   */

  module.exports.StormFlash = StormFlash;

  module.exports.StormInstance = StormInstance;

  module.exports.StormPackage = StormPackage;

  if (require.main === module) {
    config = null;
    storm = null;
    agent = new StormFlash(config);
    agent.run(storm);
    process.on('uncaughtException', (function(_this) {
      return function(err) {
        return agent.log("Caught an exception with backtrace", err.stack);
      };
    })(this));
  }

}).call(this);
