// Generated by CoffeeScript 1.7.1
(function() {
  var StormAgent, StormFlash,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Array.prototype.unique = function() {
    var key, output, value, _i, _ref, _results;
    output = {};
    for (key = _i = 0, _ref = this.length; 0 <= _ref ? _i < _ref : _i > _ref; key = 0 <= _ref ? ++_i : --_i) {
      output[this[key]] = this[key];
    }
    _results = [];
    for (key in output) {
      value = output[key];
      _results.push(value);
    }
    return _results;
  };

  StormAgent = require('stormagent');

  StormFlash = (function(_super) {
    var exec, fs, path, schema, uuid, validate;

    __extends(StormFlash, _super);

    validate = require('json-schema').validate;

    uuid = require('node-uuid');

    exec = require('child_process').exec;

    fs = require('fs');

    path = require('path');

    schema = {
      name: "module",
      type: "object",
      additionalProperties: false,
      properties: {
        "class": {
          type: "string"
        },
        id: {
          type: "string"
        },
        description: {
          type: "object",
          required: true,
          additionalProperties: false,
          properties: {
            name: {
              type: "string",
              "required": true
            },
            version: {
              type: "string",
              "required": true
            }
          }
        },
        status: {
          type: "object",
          required: false,
          additionalProperties: false,
          properties: {
            installed: {
              type: "boolean"
            },
            initialized: {
              type: "boolean"
            },
            enabled: {
              type: "boolean"
            },
            running: {
              type: "boolean"
            },
            result: {
              type: "string"
            }
          }
        }
      }
    };

    function StormFlash(config) {
      var processlib;
      StormFlash.__super__.constructor.call(this, config);
      this["import"](this);
      this.log("initialized with:\n" + this.inspect(this.functions));
      this.on('installed', (function(_this) {
        return function(pkg) {
          var _ref;
          if (pkg instanceof StormPackage) {
            _this.packages.push(pkg);
            if (!pkg.saved) {
              pkg.saved = true;
              _this.db.set(pkg.id, JSON.stringify(pkg, function() {
                return _this.emit('changed');
              }));
            }
            if (pkg.functions != null) {
              return (_ref = _this.functions).push.apply(_ref, pkg.functions);
            }
          }
        };
      })(this));
      this.on('removed', (function(_this) {
        return function(pkg) {
          return _this.packages;
        };
      })(this));
      processlib = require('./processlib');
      this.processmgr = new processlib();
      this.newdb("" + this.config.datadir + "/stormflash.db", (function(_this) {
        return function(err, db) {
          _this.db = db;
          _this.db.on('load', function(count) {});
          _this.log('loaded stormflash.db');
          try {
            return _this.db.forEach(function(key, val) {
              if (val) {
                console.log('found ' + key);
              }
              return this.emit('installed', JSON.parse(val));
            });
          } catch (_error) {
            err = _error;
            return _this.log(err);
          }
        };
      })(this));
    }

    StormFlash.prototype["new"] = function(desc, id) {
      var module;
      module = {};
      if (id) {
        module.id = id;
      } else {
        module.id = uuid.v4();
      }
      module.description = desc;
      return module;
    };

    StormFlash.prototype.lookup = function(id) {
      var entry, result;
      console.log("looking up module ID: " + id);
      entry = this.db.get(id);
      if (entry) {
        if (schema != null) {
          console.log('performing schema validation on retrieved module entry');
          result = validate(entry, schema);
          console.log(result);
          if (!result.valid) {
            return new Error("Invalid module retrieved: " + result.errors);
          }
        }
        return entry;
      } else {
        return new Error("No such module ID: " + id);
      }
    };

    StormFlash.prototype.getCommand = function(installer, command, target, version) {
      var append;
      append = '';
      switch ("" + installer + "." + command) {
        case "npm.check":
          if (version != null) {
            append = "@" + version;
          }
          return "cd /lib; npm ls 2>/dev/null | grep " + target + append;
        default:
          console.log(new Error("invalid command " + installer + "." + command + " for " + target + "!"));
          return null;
      }
    };

    StormFlash.prototype.list = function() {
      var res;
      res = {
        'modules': []
      };
      this.db.forEach(function(key, val) {
        if (val) {
          return res.modules.push(val);
        }
      });
      console.log('listing...');
      return res;
    };

    StormFlash.prototype.validate = function(module) {
      console.log('performing schema validation on module description');
      return validate(module, schema.properties.description);
    };

    StormFlash.prototype.check = function(component, callback) {
      var command;
      console.log("checking if the component '" + component.name + "' has already been installed using npm...");
      command = this.getCommand('npm', "check", component.name, component.version);
      return this.execute(command, (function(_this) {
        return function(error) {
          if (!error) {
            console.log("" + component.name + " is already installed");
            return callback(true);
          } else {
            return callback(error);
          }
        };
      })(this));
    };

    StormFlash.prototype.includeModules = function(stormflashModule) {
      var module, _i, _len, _results;
      stormflashModule = stormflashModule.unique();
      if (stormflashModule.length > 0) {
        _results = [];
        for (_i = 0, _len = stormflashModule.length; _i < _len; _i++) {
          module = stormflashModule[_i];
          console.log("include /lib/node_modules/" + module);
          _results.push(this.include(require("/lib/node_modules/" + module)));
        }
        return _results;
      }
    };

    StormFlash.prototype.install = function(pkg, callback) {
      var exists, stormflashModule;
      exists = 0;
      stormflashModule = [];
      exists = {};
      this.db.forEach(function(key, val) {
        if (val && type === true && val.description.name === module.description.name) {
          exists = 1;
        }
        if (val) {
          return stormflashModule.push(val.description.name);
        }
      });
      console.log('stormflashModule: ' + stormflashModule);
      if (type === true && exists === 1) {
        return callback({
          "status": 304
        });
      }
      if (type === false) {
        if (module.description.version && entry.description.version) {
          if (module.description.version === entry.description.version) {
            return callback({
              "status": 304
            });
          }
        }
      }
      return this.check(module.description, (function(_this) {
        return function(error) {
          if (!(error instanceof Error)) {
            stormflashModule.push(module.description.name);
            _this.includeModules(stormflashModule);
            module.status = {
              installed: true
            };
            return _this.db.set(module.id, module, function() {
              return callback(module);
            });
          } else {
            console.log('module check: ' + error);
            return callback(new Error("" + module.description.name + " module not installed!"));
          }
        };
      })(this));
    };

    StormFlash.prototype.update = function(module, entry, callback) {
      if (module.id) {
        return this.add(module, entry, false, (function(_this) {
          return function(res) {
            if (!(res instanceof Error)) {
              return callback(res);
            } else {
              return callback(res);
            }
          };
        })(this));
      } else {
        return callback(new Error("Could not find ID! " + id));
      }
    };

    StormFlash.prototype.remove = function(module, callback) {
      var exists, stormflashModule;
      stormflashModule = [];
      exists = 0;
      return fs.existsSync("/lib/node_modules/" + module.description.name, function(exists) {
        if (exists) {
          return callback({
            result: 304
          });
        } else {
          this.db.forEach(function(key, val) {
            if (val && key !== module.id) {
              return stormflashModule.push(val.description.name);
            }
          });
          console.log('stormflashModule in DEL: ' + stormflashModule);
          return this.db.rm(module.id, (function(_this) {
            return function() {
              _this.includeModules(stormflashModule);
              console.log("removed module ID: " + module.id);
              return callback({
                result: 200
              });
            };
          })(this));
        }
      });
    };

    StormFlash.prototype.monitor = function(storm, callback) {
      return console.log("monitoring");
    };

    return StormFlash;

  })(StormAgent);

  module.exports = StormFlash;

}).call(this);
