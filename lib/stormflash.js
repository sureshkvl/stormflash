// Generated by CoffeeScript 1.7.1
(function() {
  var StormBolt, StormData, StormFlash, StormInstance, StormInstances, StormPackage, StormPackages, StormRegistry, agent, config, storm,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Array.prototype.unique = function() {
    var key, output, value, _i, _ref, _results;
    output = {};
    for (key = _i = 0, _ref = this.length; 0 <= _ref ? _i < _ref : _i > _ref; key = 0 <= _ref ? ++_i : --_i) {
      output[this[key]] = this[key];
    }
    _results = [];
    for (key in output) {
      value = output[key];
      _results.push(value);
    }
    return _results;
  };

  StormData = require('stormagent').StormData;

  StormRegistry = require('stormagent').StormRegistry;

  StormInstance = (function(_super) {
    var schema;

    __extends(StormInstance, _super);

    schema = {
      name: "instance",
      type: "object",
      required: true,
      properties: {
        name: {
          type: "string",
          "required": true
        },
        id: {
          type: "string",
          "required": false
        },
        path: {
          type: "string",
          "required": true
        },
        pid: {
          type: "integer",
          "required": false
        },
        monitorOn: {
          type: "boolean",
          "required": false
        },
        args: {
          type: "array",
          required: false,
          items: {
            type: "string",
            required: false
          }
        }
      }
    };

    function StormInstance(id, data) {
      StormInstance.__super__.constructor.call(this, id, data, schema);
    }

    return StormInstance;

  })(StormData);

  StormInstances = (function(_super) {
    __extends(StormInstances, _super);

    function StormInstances(filename) {
      this.on('load', function(key, val) {
        var entry;
        entry = new StormInstance(key, val);
        if (entry != null) {
          entry.saved = true;
          return this.add(key, entry);
        }
      });
      this.on('updated', function(entry) {
        return this.log("Updated entry with key " + entry.key + " with pid " + entry.data.pid);
      });
      StormInstances.__super__.constructor.call(this, filename);
    }

    StormInstances.prototype.get = function(key) {
      var entry;
      entry = StormInstances.__super__.get.call(this, key);
      return entry;
    };

    StormInstances.prototype.discover = function() {
      var entry, key, _results;
      _results = [];
      for (key in this.entries) {
        entry = this.entries[key];
        if ((entry != null) && (entry.data != null) && (entry.data.pid != null)) {
          if (entry.data.monitor === true) {
            this.log("Emitting monitor for discovered pid " + entry.data.pid);
            entry.monitorOn = true;
            _results.push(this.emit("attachnMonitor", entry.data.pid, key));
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return StormInstances;

  })(StormRegistry);

  StormPackage = (function(_super) {
    var schema;

    __extends(StormPackage, _super);

    schema = {
      name: "package",
      type: "object",
      required: true,
      properties: {
        name: {
          type: "string",
          "required": true
        },
        id: {
          type: "string",
          "required": false
        },
        version: {
          type: "string",
          "required": true
        },
        source: {
          type: "string",
          "required": true
        },
        status: {
          type: "string",
          "required": false
        }
      }
    };

    function StormPackage(id, data) {
      StormPackage.__super__.constructor.call(this, id, data, schema);
    }

    return StormPackage;

  })(StormData);

  StormPackages = (function(_super) {
    __extends(StormPackages, _super);

    function StormPackages(filename) {
      this.on('load', function(key, val) {
        var entry;
        entry = new StormPackage(key, val);
        if (entry != null) {
          entry.saved = true;
          return this.add(key, entry);
        }
      });
      this.on('removed', function(key) {});
      StormPackages.__super__.constructor.call(this, filename);
    }

    StormPackages.prototype.get = function(key) {
      var entry;
      entry = StormPackages.__super__.get.call(this, key);
      return entry;
    };

    StormPackages.prototype.match = function(pinfo) {
      var entry, key, pkg;
      for (key in this.entries) {
        entry = this.entries[key];
        if (!((entry != null) && (entry.data != null))) {
          return;
        }
        pkg = entry.data;
        if ((pkg.name === pinfo.name) && (pkg.version === pinfo.version) && (pkg.source === pinfo.source)) {
          pkg.id = entry.id;
          return pkg;
        }
      }
    };

    StormPackages.prototype.find = function(name, version) {
      var entry, key, pkg;
      for (key in this.entries) {
        entry = this.entries[key];
        if (!((entry != null) && (entry.data != null))) {
          return;
        }
        pkg = entry.data;
        if ((pkg.name === name) && (pkg.version === version)) {
          entry.data.id = entry.id;
          return entry.data;
        }
      }
    };

    return StormPackages;

  })(StormRegistry);

  StormBolt = require('stormbolt');

  StormFlash = (function(_super) {
    var exec, fs, path, uuid, validate;

    __extends(StormFlash, _super);

    validate = require('json-schema').validate;

    exec = require('child_process').exec;

    fs = require('fs');

    path = require('path');

    uuid = require('node-uuid');

    function StormFlash(config) {
      StormFlash.__super__.constructor.call(this, config);
      this["import"](module);
      fs.mkdir("" + this.config.datadir, function() {});
      fs.mkdir("" + this.config.datadir + "/plugins", function() {});
      this.on('ready', (function(_this) {
        return function() {
          var processmgr, spm;
          _this.packages = new StormPackages("" + _this.config.datadir + "/packages.db");
          _this.instances = new StormInstances("" + _this.config.datadir + "/instances.db");
          _this.log('loading spm...');
          spm = require('./spm').StormPackageManager;
          _this.spm = new spm({
            log: _this.log,
            repatInterval: _this.config.repeatInterval,
            "import": _this["import"]
          });
          _this.spm.on('discovered', function(pkgType, pinfo) {
            var pkg, spkg;
            pkg = _this.packages.find(pinfo.name, pinfo.version);
            if (pkg == null) {
              if (pinfo.source == null) {
                pinfo.source = "builtin";
              }
              _this.log("Discovered package ", pinfo);
              spkg = new StormPackage(null, pinfo);
              return _this.packages.add(uuid.v4(), spkg);
            } else {
              if (pkgType === "npm") {
                _this.log("test: discovered package that existed in Db " + pkg.name + " is having source ", pkg.source);
                return _this.spm.emit("npminclude", pinfo.name);
              }
            }
          });
          _this.spm.on("npminclude", function(name) {
            var err, pkgconfig, plugfile, storm, _i, _len, _ref, _results;
            if (name == null) {
              return;
            }
            try {
              pkgconfig = require("" + name + "/package.json").config;
              storm = pkgconfig.storm;
              _ref = storm.plugins;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                plugfile = _ref[_i];
                _results.push((function(plugfile) {
                  var plugin;
                  plugin = require("" + name + "/" + plugfile);
                  if (plugin != null) {
                    _this.log("include - [" + name + "] found valid plugin at " + plugfile);
                    return fs.open("" + _this.config.datadir + "/plugins/" + name + ".db", 'a', function(result) {
                      return _this.include(plugin);
                    });
                  }
                })(plugfile));
              }
              return _results;
            } catch (_error) {
              err = _error;
              return _this.log("Error in including the npm module " + name, err);
            }
          });
          processmgr = require('./processmgr').ProcessManager;
          _this.processmgr = new processmgr();
          _this.processmgr.on("error", function(error, key, pid) {
            _this.log("Error while starting the process for key " + key + " ", error);
            return entry.status = "error";
          });
          _this.processmgr.on("signal", function(signal, pid, key) {
            var entry;
            _this.log("recieved signal " + signal + " from pid " + pid + " with key " + key);
            switch (signal) {
              case "stopped":
              case "killed":
              case "exited":
                entry = _this.instances.entries[key];
                if ((entry != null) && entry.monitorOn === true) {
                  _this.log("Starting the process with " + entry.name);
                  _this.log("Sending stop signal to pid " + pid);
                  _this.processmgr.stop(pid, key);
                  return _this.start(key, function(key, pid) {
                    if (key instanceof Error) {
                      _this.log(key);
                    }
                  });
                }
                break;
              case "error":
                return _this.log("Error in getting signals from process");
            }
          });
          _this.processmgr.on("attachError", function(err, pid, key) {
            var entry;
            _this.log('attach error ', err, pid, key);
            entry = _this.instances.entries[key];
            if (entry !== void 0 && (entry != null)) {
              entry.status = "error";
              return _this.log("Failed to attach for pid ", pid, "Reason is ", err);
            }
          });
          _this.processmgr.on("detachError", function(err, pid, key) {
            var entry;
            entry = _this.instances.entries[key];
            if (entry !== void 0 && (entry != null)) {
              entry.status = "error";
              return _this.log("Failed to detach for pid ", pid, "Reason is ", err);
            }
          });
          _this.processmgr.on("stopped", function(signal, pid, key) {
            var entry;
            if (signal != null) {
              _this.log("process stopped due to signal ", signal);
            }
            if (key != null) {
              entry = _this.instances.entries[key];
            }
            if (entry != null) {
              if (entry != null) {
                _this.log("process was not running. pid expected is  ", pid, "binary name is ", entry.name);
              }
              return _this.start(key, function(key, pid) {
                if (key instanceof Error) {
                  _this.log(key);
                }
              });
            }
          });
          _this.processmgr.on("attached", function(result, pid, key) {
            var entry;
            entry = _this.instances.entries[key];
            if (entry != null) {
              entry.status = "running|monitored";
              return _this.log("process " + pid + " with key " + key + "  is attached");
            }
          });
          _this.instances.on("attachnMonitor", function(pid, key) {
            _this.log("Starting monitor on discovered pid " + pid + " with key " + key);
            _this.processmgr.attach(pid, key);
            return _this.processmgr.monitor(pid, key);
          });
          _this.processmgr.on("monitor", function(pid, key) {
            _this.log("Starting monitor on pid " + pid + " with key " + key);
            return _this.processmgr.monitor(pid, key);
          });
          _this.spm.monitor(_this.config.repeatInterval);
          return _this.instances.discover();
        };
      })(this));
    }

    StormFlash.prototype.status = function() {
      var state;
      state = StormFlash.__super__.status.apply(this, arguments);
      state.packages = this.packages.list();
      state.instances = this.instances.list();
      return state;
    };

    StormFlash.prototype.run = function(config) {
      StormFlash.__super__.run.call(this, config);
      return this.emit('ready');
    };

    StormFlash.prototype.install = function(pinfo, callback) {
      var pkg;
      pkg = this.packages.match(pinfo);
      if (pkg != null) {
        this.log("Found matching package name " + pkg.name);
        callback(pkg);
      }
      return this.spm.install(pinfo, (function(_this) {
        return function(pkg) {
          if (pkg instanceof Error) {
            return callback(pkg);
          }
          _this.packages.add(uuid.v4(), pinfo);
          _this.emit('installed the package ', pinfo.name, pinfo.id);
          return callback(pinfo);
        };
      })(this));
    };

    StormFlash.prototype.uninstall = function(pinfo, callback) {
      var instance, pkg;
      pkg = this.packages.match(pinfo);
      if (pkg instanceof Error) {
        return 404;
      }
      instance = this.instances.match(pkg.name);
      if (instance != null) {
        this.processmgr.once('stop', function(key, pid) {
          this.processmgr.stop(pid, key);
          return this.instances.remove(key);
        });
        this.processmgr.emit('stop', instance.key, instance.pid);
      }
      return this.spm.uninstall(pinfo, (function(_this) {
        return function(result) {
          if (result instanceof Error) {
            return callback(500);
          }
          _this.packages.remove(pkg.id);
          _this.emit('uinstalled', pkg.name, pkg.id);
          return callback(result);
        };
      })(this));
    };

    StormFlash.prototype.update = function(module, entry, callback) {
      if (module.id) {
        return this.add(module, entry, false, (function(_this) {
          return function(res) {
            if (!(res instanceof Error)) {
              return callback(res);
            } else {
              return callback(res);
            }
          };
        })(this));
      } else {
        return callback(new Error("Could not find ID! " + id));
      }
    };

    StormFlash.prototype.start = function(key, callback) {
      var entry, pid;
      entry = this.instances.entries[key];
      if (!((entry != null) && (entry.data != null))) {
        return callback(new Error("Key " + key + " does not exist in DB"));
      }
      pid = this.processmgr.start(entry.data.name, entry.data.path, entry.data.args, key);
      if (pid == null) {
        callback(new Error("Not able to start the binary"));
      }
      entry.data.pid = pid;
      if (entry.data.monitor === true) {
        entry.monitorOn = true;
      }
      entry.saved = false;
      this.instances.update(key, entry);
      this.processmgr.attach(pid, key);
      if (callback != null) {
        callback(key, pid);
      }
      if (entry.monitorOn === true) {
        return this.processmgr.emit("monitor", pid, key);
      }
    };

    StormFlash.prototype.stop = function(key, callback) {
      var entry;
      entry = this.instances.entries[key];
      if (!((entry != null) && (entry.data != null) && (entry.data.pid != null))) {
        return callback(new Error("No running process"));
      }
      this.log("Stopping the process with pid " + entry.data.pid);
      entry.monitorOn = false;
      entry.saved = false;
      this.instances.update(key, entry);
      return this.processmgr.stop(entry.data.pid, key);
    };

    StormFlash.prototype.restart = function(key, callback) {
      var entry, pid, status;
      entry = this.instances.entries[key];
      entry.monitorOn = false;
      status = this.processmgr.stop(entry.data.pid, key);
      if (!(status instanceof Error)) {
        pid = this.processmgr.start(entry.data.name, entry.data.path, entry.data.args, key);
        entry.data.pid = pid;
        entry.saved = false;
        if (entry.data.monitor === true) {
          entry.monitorOn = true;
        }
        return this.instances.update(key, entry);
      }
    };

    return StormFlash;

  })(StormBolt);


  /*
   * SINGLETON CLASS OBJECT
   */

  module.exports.StormFlash = StormFlash;

  module.exports.StormInstance = StormInstance;

  module.exports.StormPackage = StormPackage;

  if (require.main === module) {
    config = null;
    storm = null;
    agent = new StormFlash(config);
    agent.run(storm);
    if (typeof gc !== "undefined" && gc !== null) {
      setInterval((function() {
        return gc();
      }), 60000);
    }
  }

}).call(this);
