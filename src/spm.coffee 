StormData = require('stormagent').StormData

class StormPackage extends StormData

    schema =
        name: "package"
        type: "object"
        required: true
        properties:
            name : { type: "string", "required": true }
            version : { type: "string", "required": true }
            source : { type: "string", "required": true }

    constructor: (id, data) ->
        super id, data, schema
        # process source and find out type

    install: ->
        # do some type of check if installed in the system

#-----------------------------------------------------------------

StormRegistry = require('stormagent').StormRegistry

class StormPackages extends StormRegistry

    async = require 'async'

    constructor: (filename) ->
        @on 'load', (key,val) ->
            entry = new StormPackage key,val
            if entry?
                entry.saved = true
                @add key, entry

        @on 'added', (pkg) ->
            if pkg.npm
                @import pkg.name

        @on 'removed', (pkg) ->
            pkg.remove() if pkg.remove?

        #spm is the repository of system installed packages
        @oldspm = require('./oldspm')

        super filename

    get: (key) ->
        entry = super key

    install: (pkg) ->
        if pkg instanceof StormPackage
            pkg.install
        @add key, pkg

    add: (key, pkg) ->
        entry = super key, pkg

    match: (pdata) ->
        for key, pkg of @entries
            if pkg.data.name is pdata.name and pkg.data.version is pdata.version and pkg.data.source is pdata.source
                return key
        false

    monitor: (interval) ->
        async.whilst(
            () =>
                @running
            (repeat) =>
                # inspect all packages retrieved from SPM and discover newly 'installed' packages
                for pdata in @oldspm.list()
                    do (pdata) => # issue all checks in parallel
                        unless @match pdata
                            @add null, new StormPackage null, pkg

                # inspect all packages currently known to agent and discover newly 'removed' packages
                for key, pkg of @entries
                    unless pkg.installed()
                        @remove key
                    ###
                    unless @spm.exists pkg.data
                        @remove key
                    ###

                setTimeout repeat, interval

            (err) =>
                @log "package monitoring stopped..."
        )

module.exports.StormPackage = StormPackage
